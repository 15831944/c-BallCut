// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "cspan1.h"

/////////////////////////////////////////////////////////////////////////////
// CCSpan

IMPLEMENT_DYNCREATE(CCSpan, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CCSpan properties

long CCSpan::GetMaxValue()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CCSpan::SetMaxValue(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long CCSpan::GetMinValue()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CCSpan::SetMinValue(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

unsigned long CCSpan::GetPointColor()
{
	unsigned long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CCSpan::SetPointColor(unsigned long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

CString CCSpan::GetTitle()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CCSpan::SetTitle(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

long CCSpan::GetScaleCount()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CCSpan::SetScaleCount(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

OLE_COLOR CCSpan::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CCSpan::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

double CCSpan::GetPointValue()
{
	double result;
	GetProperty(0xa, VT_R8, (void*)&result);
	return result;
}

void CCSpan::SetPointValue(double propVal)
{
	SetProperty(0xa, VT_R8, propVal);
}

unsigned long CCSpan::GetBeginColor()
{
	unsigned long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CCSpan::SetBeginColor(unsigned long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

unsigned long CCSpan::GetMidColor()
{
	unsigned long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CCSpan::SetMidColor(unsigned long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

unsigned long CCSpan::GetEndColor()
{
	unsigned long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CCSpan::SetEndColor(unsigned long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

OLE_COLOR CCSpan::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CCSpan::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

long CCSpan::GetProgressValue()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CCSpan::SetProgressValue(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCSpan operations

void CCSpan::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
