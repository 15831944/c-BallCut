// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "displayctrl.h"

// Dispatch interfaces referenced by this interface
#include "font.h"

/////////////////////////////////////////////////////////////////////////////
// CDisplayCtrl

IMPLEMENT_DYNCREATE(CDisplayCtrl, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CDisplayCtrl properties

long CDisplayCtrl::GetDisplayCount()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CDisplayCtrl::SetDisplayCount(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

long CDisplayCtrl::GetDisplayData()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CDisplayCtrl::SetDisplayData(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

COleFont CDisplayCtrl::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CDisplayCtrl::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

short CDisplayCtrl::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CDisplayCtrl::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

short CDisplayCtrl::GetAppearance()
{
	short result;
	GetProperty(DISPID_APPEARANCE, VT_I2, (void*)&result);
	return result;
}

void CDisplayCtrl::SetAppearance(short propVal)
{
	SetProperty(DISPID_APPEARANCE, VT_I2, propVal);
}

OLE_COLOR CDisplayCtrl::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CDisplayCtrl::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

BOOL CDisplayCtrl::GetShapeCircle()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CDisplayCtrl::SetShapeCircle(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

OLE_COLOR CDisplayCtrl::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CDisplayCtrl::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

BOOL CDisplayCtrl::GetCouldSelect()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CDisplayCtrl::SetCouldSelect(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

unsigned long CDisplayCtrl::GetTextColor()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CDisplayCtrl::SetTextColor(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CDisplayCtrl operations

void CDisplayCtrl::SetDisplayName(long nIndex, LPCTSTR strName)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nIndex, strName);
}

short CDisplayCtrl::GetDbClickNum()
{
	short result;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CDisplayCtrl::MoveNext()
{
	InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CDisplayCtrl::MovePrior()
{
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CDisplayCtrl::ShowPrefix(BOOL bShow)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bShow);
}

void CDisplayCtrl::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
