// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "btnctl.h"

// Dispatch interfaces referenced by this interface
#include "font1.h"
#include "Picture.h"

/////////////////////////////////////////////////////////////////////////////
// CBtnCtl

IMPLEMENT_DYNCREATE(CBtnCtl, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CBtnCtl properties

OLE_COLOR CBtnCtl::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CBtnCtl::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

CString CBtnCtl::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CBtnCtl::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

short CBtnCtl::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CBtnCtl::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

OLE_COLOR CBtnCtl::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CBtnCtl::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

COleFont CBtnCtl::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CBtnCtl::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

long CBtnCtl::GetAlign()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CBtnCtl::SetAlign(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

BOOL CBtnCtl::GetBackgroundStyle()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CBtnCtl::SetBackgroundStyle(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

CPicture CBtnCtl::GetBmpNormal()
{
	LPDISPATCH pDispatch;
	GetProperty(0x5, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CBtnCtl::SetBmpNormal(LPDISPATCH propVal)
{
	SetProperty(0x5, VT_DISPATCH, propVal);
}

CPicture CBtnCtl::GetBmpFocus()
{
	LPDISPATCH pDispatch;
	GetProperty(0x7, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CBtnCtl::SetBmpFocus(LPDISPATCH propVal)
{
	SetProperty(0x7, VT_DISPATCH, propVal);
}

CPicture CBtnCtl::GetBmpHot()
{
	LPDISPATCH pDispatch;
	GetProperty(0x6, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CBtnCtl::SetBmpHot(LPDISPATCH propVal)
{
	SetProperty(0x6, VT_DISPATCH, propVal);
}

CPicture CBtnCtl::GetBmpDisable()
{
	LPDISPATCH pDispatch;
	GetProperty(0x8, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CBtnCtl::SetBmpDisable(LPDISPATCH propVal)
{
	SetProperty(0x8, VT_DISPATCH, propVal);
}

BOOL CBtnCtl::GetBorderShape()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CBtnCtl::SetBorderShape(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

CString CBtnCtl::GetTipMsg()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CBtnCtl::SetTipMsg(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CBtnCtl operations
