// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "captioninfo1.h"

// Dispatch interfaces referenced by this interface
#include "Font1.h"

/////////////////////////////////////////////////////////////////////////////
// CCaptionInfo

IMPLEMENT_DYNCREATE(CCaptionInfo, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CCaptionInfo properties

short CCaptionInfo::GetAppearance()
{
	short result;
	GetProperty(DISPID_APPEARANCE, VT_I2, (void*)&result);
	return result;
}

void CCaptionInfo::SetAppearance(short propVal)
{
	SetProperty(DISPID_APPEARANCE, VT_I2, propVal);
}

OLE_COLOR CCaptionInfo::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CCaptionInfo::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

short CCaptionInfo::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CCaptionInfo::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

CString CCaptionInfo::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CCaptionInfo::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

COleFont CCaptionInfo::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CCaptionInfo::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

OLE_COLOR CCaptionInfo::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CCaptionInfo::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

long CCaptionInfo::GetAlign()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CCaptionInfo::SetAlign(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long CCaptionInfo::GetStyle()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CCaptionInfo::SetStyle(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

long CCaptionInfo::GetDistance()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CCaptionInfo::SetDistance(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

BOOL CCaptionInfo::GetBackgroudStyle()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CCaptionInfo::SetBackgroudStyle(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

CString CCaptionInfo::GetBmpPathName()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CCaptionInfo::SetBmpPathName(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCaptionInfo operations

void CCaptionInfo::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
